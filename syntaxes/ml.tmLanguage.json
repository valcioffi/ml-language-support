{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "ML",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#characters"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#identifiers"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#nil"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#types"
		},
		{
			"include": "#modules"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.control.ml",
			"match": "\\b(if|then|else|and|fun|use|val|exception|raise|as|case|let|in|end)\\b"
			},
			{
				"name": "keyword.control.ml",
				"match": "\\|"
				}]
		},
		"strings": {
			"name": "string.quoted.double.ml",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.ml",
					"match": "\\\\."
				}
			]
		},
		"characters": {
			"patterns": [
				{
					"name": "string.quoted.single.ml",
					"match": "#\"(.)\""
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.block.ml",
					"begin": "\\(\\*",
					"end": "\\*\\)",
					"patterns": [
						{
							"include": "#comments"
						}
					]		
				}
			]	
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.ml",
					"match": "(\\+|-|<>|::|=|@)"
				},
				{
					"name": "keyword.operator.logical.ml",
					"match": "\\b(andalso|orelse)\\b"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.ml",
					"match": "\\b\\d+\\b"
				}
			]
		},
		"nil": {
			"patterns": [
				{
					"name": "constant.language.nil.ml",
					"match": "\\bnil\\b"
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"name": "entity.name.function.ml",
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\(.*\\))"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "variable",
					"match": "\\b(val)\\s+(\\w+)\\b"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"name": "storage.type.ml",
					"match": "\\b(int|real|bool|string|char|list)\\b"
				}
			]
		}
	},
	"scopeName": "source.ml"
}